---
title: "A few notes on SQL"
author: "Daniel Kick"
date: "2024-05-17"
image: "https://upload.wikimedia.org/wikipedia/commons/f/f0/Haizahn-foss.jpg"
categories: 
  - code
  - SQL
  - beginner
draft: true
---

There are some tools that are neither new nor 'shiny' but are very much worth learning. Some technologies are like `vim` or `LISP`[^1] can introduce ways of approaching about tasks and problems that may be new to you. Often these tools *appear* dated because they've been around so long. Learning new tools and frameworks is great, but based on the [Lindy effect](https://en.wikipedia.org/wiki/Lindy_effect) it's arguably *more* important to learn what the "old" tools have to offer.

[^1]: Hopefully more on this later. One of the early chapters in SICP unexpectedly helped me with a deep learning problem last year.

I especially like this metaphor about SQL, which has been with us since 1970.

> \[R\]relational databases aren’t dinosaurs. They aren’t lumbering prehistoric relics doomed to extinction by a changing world. They are sharks. Apex predators honed by millions of years of evolution into a perfectly adapted creature that is just as effective today as it was eons ago.[^2]

[^2]: [Relational Databases Aren’t Dinosaurs, They’re Sharks](https://www.simplethread.com/relational-databases-arent-dinosaurs-theyre-sharks/


The goal here is not to discuss theory or setup (although see [this post](/posts/DanielKick/240905_postgres_via_parquet/index.qmd) but show that SQL is more accessible than you might suppose and provide a few links to learn more. 

Sometimes the good ideas end up being reincarnated. If you've worked with `R`'s `dplyr` or python's `polars` or `pandas` there's a good chance this will be new syntax for familiar ideas. 














So let's talk about the shark in the room.

<https://josiahparry.com/posts/2024-05-16-databases-for-ds>

-   RDBMS - Relational database management system

-   Primary Keys

-   Foreign keys

-   Database normalization (and when it's useful)

-   Schemas vs tables

-   Views vs tables

-   Table indexes

-   to read up on:

    -   parquet

    -   apache arrow

    -   DuckDB

<https://www.simplethread.com/relational-databases-arent-dinosaurs-theyre-sharks/>

+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ACID: SQL properties |                                                                                                                                                          |
+======================+==========================================================================================================================================================+
| Atomicity            | A set of operations either all succeed or all fail. It can't half work and mess up the state.                                                            |
+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| Consistency          | Operations don't create invalid states.                                                                                                                  |
+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| Isolation            | Transactions can't see data modified by other transactions. Transactions acting at the same time behave the same as if they were happening sequentially. |
+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| Durability           | After a transaction is committed the system can go down and that change will still be there.                                                             |
+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+

+-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| BASE: NoSQL Compromises |                                                                                                                                                   |
+=========================+===================================================================================================================================================+
| Basically Available     | The system returns a value but it might not return the same value for everyone because a database can provide only two of the following:          |
|                         |                                                                                                                                                   |
|                         | -   Consistency: Everyone reading sees the most up-to-date info.                                                                                  |
|                         |                                                                                                                                                   |
|                         | -   Availibility: Every request returns a value                                                                                                   |
|                         |                                                                                                                                                   |
|                         | -   Partition tolerance: If messages are delayed or dropped between nodes the system still works.                                                 |
+-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| Soft State              | Values may change without interaction because of eventual consistency.                                                                            |
+-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| Eventual Consistency    | Written data won't necessarily be available to everyone right out of the gate. Different people may receive different results during this window. |
+-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------+

These compromises provide benefits to performance and ease of storing different data types.

## SQLite

-   RDBMS generally need a server process to interact with the files. SQLite does not.

<https://www.sqlitetutorial.net/>

``` sql
# Start
sqlite3 sim_1698728407_78912.sqlite

# alternate: 
# sqlite3
# .open /path/to/file.db
# if you open a path that doesn't exist a new database will be initialized

# Show all tables
sqlite> .tables
DefaultCultivarsAll  Ids
Genotypes            Results

# find a table with a following a pattern
sqlite> .table '%s'
Genotypes  Ids        Results


# examing a table
# without table name you'll be shown all tables schemas
sqlite> .schema Ids
CREATE TABLE `Ids` (
  `Longitude` REAL,
  `Latitude` REAL,
  `SoilIdx` REAL,
  `SowDate` TEXT,
  `Genotype` TEXT,
  `FactorialUID` INTEGER
);


# to see the schema for all tables and a statistics table use
.fullschema 

# show indexes for database (mine doesn't have any)
.indexes 


# databases in current connection
.databases


# Saving results out:
sqlite> .output deleteme.txt
sqlite> SELECT SoilIdx FROM Ids;
   

# Read SQL commands from a file
.read /path/to/script.txt

# exit
.exit
```

https://gitlab.com/Screwtapello/sqlite-schema-diagram/-/tree/main?ref_type=heads https://www.sqlitetutorial.net/ https://gvwilson.github.io/sql-tutorial/core/ https://sqlzoo.net/wiki/SQL_Tutorial https://use-the-index-luke.com/

strings should be in single quotes

SELECT cols FROM table WHERE name = 'Germany';

WHERE name IN ('item1', 'item2');

WHERE area BETWEEN 200000 AND 250000

WHERE name LIKE "Al%"

\# matches

LEFT(s,n) extracts n characters form the left

AND OR XOR NOT

= \> \<

\<\> \# inequality

exclude characters name not like '%a%'

length(name) round

Nested select with parens SELECT name FROM world WHERE population \> (SELECT population FROM world WHERE name='Russia')

Order by col ASC

"correlated" or "synchronized" sub query

SELECT continent, name, area FROM world x WHERE area \>= ALL \# largest area (SELECT area FROM world y \# WHERE y.continent=x.continent \# where continents between tables are the same AND population\>0) \# and values aren't null
